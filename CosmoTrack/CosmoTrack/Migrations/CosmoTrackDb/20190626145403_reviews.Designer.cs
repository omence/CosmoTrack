// <auto-generated />
using System;
using CosmoTrack.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CosmoTrack.Migrations.CosmoTrackDb
{
    [DbContext(typeof(CosmoTrackDbContext))]
    [Migration("20190626145403_reviews")]
    partial class reviews
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CosmoTrack.Models.Follow", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FollowerID");

                    b.Property<string>("FollowingID");

                    b.HasKey("ID");

                    b.ToTable("Follows");
                });

            modelBuilder.Entity("CosmoTrack.Models.Image", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ImagePath");

                    b.Property<string>("Title");

                    b.HasKey("ID");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("CosmoTrack.Models.Product", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Brand");

                    b.Property<DateTime>("DateCreated");

                    b.Property<string>("Description");

                    b.Property<bool>("HasJournalEntry");

                    b.Property<bool>("HasReview");

                    b.Property<string>("ImageURL");

                    b.Property<string>("Ingredients");

                    b.Property<string>("Name");

                    b.Property<decimal>("Price");

                    b.Property<string>("Tags");

                    b.Property<string>("UserID");

                    b.HasKey("ID");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("CosmoTrack.Models.ProductJournal", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateCreated");

                    b.Property<string>("JournalEntry");

                    b.Property<int>("ProductID");

                    b.Property<bool>("ViewableByFollwers");

                    b.HasKey("ID");

                    b.HasIndex("ProductID");

                    b.ToTable("ProductJournals");
                });

            modelBuilder.Entity("CosmoTrack.Models.Profile", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CurrentRegiment");

                    b.Property<string>("ProfileImageURL");

                    b.Property<string>("UserName");

                    b.Property<bool>("ViewableByFollwers");

                    b.HasKey("ID");

                    b.ToTable("Profiles");
                });

            modelBuilder.Entity("CosmoTrack.Models.Review", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateCreated");

                    b.Property<string>("ImageFourURL");

                    b.Property<string>("ImageOneURL");

                    b.Property<string>("ImageThreeURL");

                    b.Property<string>("ImageTwoURL");

                    b.Property<bool>("MakePublic");

                    b.Property<string>("NickName");

                    b.Property<int>("ProductID");

                    b.Property<string>("ProfileImageURL");

                    b.Property<int>("Rating");

                    b.Property<string>("Tags");

                    b.Property<string>("UserID");

                    b.Property<string>("UserReview");

                    b.Property<string>("VideoReviewURL");

                    b.HasKey("ID");

                    b.HasIndex("ProductID")
                        .IsUnique();

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("CosmoTrack.Models.UserJournal", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateCreated");

                    b.Property<string>("JournalEntry");

                    b.Property<string>("UserID");

                    b.Property<bool>("ViewableByFollwers");

                    b.HasKey("ID");

                    b.ToTable("UserJournals");
                });

            modelBuilder.Entity("CosmoTrack.Models.ProductJournal", b =>
                {
                    b.HasOne("CosmoTrack.Models.Product")
                        .WithMany("ProductJournals")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CosmoTrack.Models.Review", b =>
                {
                    b.HasOne("CosmoTrack.Models.Product", "UserProduct")
                        .WithOne("Reviews")
                        .HasForeignKey("CosmoTrack.Models.Review", "ProductID")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
